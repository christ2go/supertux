/**
 * WARNING: This file is automatically generated from:
 *  'src/scripting/wrapper.interface.hpp'
 * DO NOT CHANGE
 */

#include <sstream>
#include <sqrat.h>
#include "scripting/squirrel_error.hpp"
#include "scripting/wrapper.interface.hpp"

namespace scripting {
namespace wrapper {

static SQInteger AmbientSound_release_hook(SQUserPointer ptr, SQInteger )
{
  auto _this = reinterpret_cast<scripting::AmbientSound*> (ptr);
  delete _this;
  return 0;
}

static SQInteger AmbientSound_set_pos_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'set_pos' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::AmbientSound*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }

  SQFloat arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg1;
  if(SQ_FAILED(sq_getfloat(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not a float"));
    return SQ_ERROR;
  }

  try {
    _this->set_pos(static_cast<float> (arg0), static_cast<float> (arg1));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'set_pos'"));
    return SQ_ERROR;
  }

}

static SQInteger AmbientSound_get_pos_x_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'get_pos_x' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::AmbientSound*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }


  try {
    float return_value = _this->get_pos_x();

    sq_pushfloat(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'get_pos_x'"));
    return SQ_ERROR;
  }

}

static SQInteger AmbientSound_get_pos_y_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'get_pos_y' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::AmbientSound*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }


  try {
    float return_value = _this->get_pos_y();

    sq_pushfloat(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'get_pos_y'"));
    return SQ_ERROR;
  }

}

static SQInteger Candle_release_hook(SQUserPointer ptr, SQInteger )
{
  auto _this = reinterpret_cast<scripting::Candle*> (ptr);
  delete _this;
  return 0;
}

static SQInteger Candle_get_burning_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'get_burning' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::Candle*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }


  try {
    bool return_value = _this->get_burning();

    sq_pushbool(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'get_burning'"));
    return SQ_ERROR;
  }

}

static SQInteger Candle_set_burning_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'set_burning' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::Candle*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }

  SQBool arg0;
  if(SQ_FAILED(sq_getbool(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a bool"));
    return SQ_ERROR;
  }

  try {
    _this->set_burning(arg0 == SQTrue);

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'set_burning'"));
    return SQ_ERROR;
  }

}

static SQInteger DisplayEffect_release_hook(SQUserPointer ptr, SQInteger )
{
  auto _this = reinterpret_cast<scripting::DisplayEffect*> (ptr);
  delete _this;
  return 0;
}

static SQInteger DisplayEffect_fade_out_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'fade_out' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::DisplayEffect*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }

  SQFloat arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }

  try {
    _this->fade_out(static_cast<float> (arg0));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'fade_out'"));
    return SQ_ERROR;
  }

}

static SQInteger DisplayEffect_fade_in_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'fade_in' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::DisplayEffect*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }

  SQFloat arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }

  try {
    _this->fade_in(static_cast<float> (arg0));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'fade_in'"));
    return SQ_ERROR;
  }

}

static SQInteger DisplayEffect_set_black_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'set_black' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::DisplayEffect*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }

  SQBool arg0;
  if(SQ_FAILED(sq_getbool(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a bool"));
    return SQ_ERROR;
  }

  try {
    _this->set_black(arg0 == SQTrue);

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'set_black'"));
    return SQ_ERROR;
  }

}

static SQInteger DisplayEffect_is_black_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'is_black' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::DisplayEffect*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }


  try {
    bool return_value = _this->is_black();

    sq_pushbool(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'is_black'"));
    return SQ_ERROR;
  }

}

static SQInteger DisplayEffect_sixteen_to_nine_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'sixteen_to_nine' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::DisplayEffect*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }

  SQFloat arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }

  try {
    _this->sixteen_to_nine(static_cast<float> (arg0));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'sixteen_to_nine'"));
    return SQ_ERROR;
  }

}

static SQInteger DisplayEffect_four_to_three_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'four_to_three' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::DisplayEffect*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }

  SQFloat arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }

  try {
    _this->four_to_three(static_cast<float> (arg0));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'four_to_three'"));
    return SQ_ERROR;
  }

}

static SQInteger Gradient_release_hook(SQUserPointer ptr, SQInteger )
{
  auto _this = reinterpret_cast<scripting::Gradient*> (ptr);
  delete _this;
  return 0;
}

static SQInteger Gradient_set_direction_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'set_direction' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::Gradient*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }

  const SQChar* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }

  try {
    _this->set_direction(arg0);

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'set_direction'"));
    return SQ_ERROR;
  }

}

static SQInteger Gradient_get_direction_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'get_direction' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::Gradient*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }


  try {
    std::string return_value = _this->get_direction();

    sq_pushstring(vm, return_value.c_str(), return_value.size());
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'get_direction'"));
    return SQ_ERROR;
  }

}

static SQInteger Gradient_set_color1_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'set_color1' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::Gradient*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }

  SQFloat arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg1;
  if(SQ_FAILED(sq_getfloat(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg2;
  if(SQ_FAILED(sq_getfloat(vm, 4, &arg2))) {
    sq_throwerror(vm, _SC("Argument 3 not a float"));
    return SQ_ERROR;
  }

  try {
    _this->set_color1(static_cast<float> (arg0), static_cast<float> (arg1), static_cast<float> (arg2));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'set_color1'"));
    return SQ_ERROR;
  }

}

static SQInteger Gradient_set_color2_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'set_color2' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::Gradient*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }

  SQFloat arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg1;
  if(SQ_FAILED(sq_getfloat(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg2;
  if(SQ_FAILED(sq_getfloat(vm, 4, &arg2))) {
    sq_throwerror(vm, _SC("Argument 3 not a float"));
    return SQ_ERROR;
  }

  try {
    _this->set_color2(static_cast<float> (arg0), static_cast<float> (arg1), static_cast<float> (arg2));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'set_color2'"));
    return SQ_ERROR;
  }

}

static SQInteger Gradient_swap_colors_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'swap_colors' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::Gradient*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }


  try {
    _this->swap_colors();

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'swap_colors'"));
    return SQ_ERROR;
  }

}

static SQInteger Inventory_release_hook(SQUserPointer ptr, SQInteger )
{
  auto _this = reinterpret_cast<scripting::Inventory*> (ptr);
  delete _this;
  return 0;
}

static SQInteger Inventory_constructor_wrapper(HSQUIRRELVM vm)
{

  try {
    auto _this = new scripting::Inventory();
  if(SQ_FAILED(sq_setinstanceup(vm, 1, _this))) {
    sq_throwerror(vm, _SC("Couldn't setup instance of 'Inventory' class"));
    return SQ_ERROR;
  }
  sq_setreleasehook(vm, 1, Inventory_release_hook);

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'constructor'"));
    return SQ_ERROR;
  }

}

static SQInteger Inventory_hasItem_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'hasItem' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::Inventory*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }

  const SQChar* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }

  try {
    bool return_value = _this->hasItem(arg0);

    sq_pushbool(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'hasItem'"));
    return SQ_ERROR;
  }

}

static SQInteger Inventory_isInventoryItem_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'isInventoryItem' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::Inventory*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }


  try {
    bool return_value = _this->isInventoryItem();

    sq_pushbool(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'isInventoryItem'"));
    return SQ_ERROR;
  }

}

static SQInteger LevelTime_release_hook(SQUserPointer ptr, SQInteger )
{
  auto _this = reinterpret_cast<scripting::LevelTime*> (ptr);
  delete _this;
  return 0;
}

static SQInteger LevelTime_start_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'start' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::LevelTime*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }


  try {
    _this->start();

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'start'"));
    return SQ_ERROR;
  }

}

static SQInteger LevelTime_stop_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'stop' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::LevelTime*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }


  try {
    _this->stop();

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'stop'"));
    return SQ_ERROR;
  }

}

static SQInteger LevelTime_get_time_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'get_time' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::LevelTime*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }


  try {
    float return_value = _this->get_time();

    sq_pushfloat(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'get_time'"));
    return SQ_ERROR;
  }

}

static SQInteger LevelTime_set_time_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'set_time' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::LevelTime*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }

  SQFloat arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }

  try {
    _this->set_time(static_cast<float> (arg0));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'set_time'"));
    return SQ_ERROR;
  }

}

static SQInteger ParticleSystem_release_hook(SQUserPointer ptr, SQInteger )
{
  auto _this = reinterpret_cast<scripting::ParticleSystem*> (ptr);
  delete _this;
  return 0;
}

static SQInteger ParticleSystem_set_enabled_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'set_enabled' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::ParticleSystem*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }

  SQBool arg0;
  if(SQ_FAILED(sq_getbool(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a bool"));
    return SQ_ERROR;
  }

  try {
    _this->set_enabled(arg0 == SQTrue);

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'set_enabled'"));
    return SQ_ERROR;
  }

}

static SQInteger ParticleSystem_get_enabled_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'get_enabled' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::ParticleSystem*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }


  try {
    bool return_value = _this->get_enabled();

    sq_pushbool(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'get_enabled'"));
    return SQ_ERROR;
  }

}

static SQInteger Platform_release_hook(SQUserPointer ptr, SQInteger )
{
  auto _this = reinterpret_cast<scripting::Platform*> (ptr);
  delete _this;
  return 0;
}

static SQInteger Platform_goto_node_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'goto_node' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::Platform*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }

  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }

  try {
    _this->goto_node(static_cast<int> (arg0));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'goto_node'"));
    return SQ_ERROR;
  }

}

static SQInteger Platform_start_moving_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'start_moving' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::Platform*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }


  try {
    _this->start_moving();

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'start_moving'"));
    return SQ_ERROR;
  }

}

static SQInteger Platform_stop_moving_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'stop_moving' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::Platform*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }


  try {
    _this->stop_moving();

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'stop_moving'"));
    return SQ_ERROR;
  }

}


static SQInteger ScriptedObject_release_hook(SQUserPointer ptr, SQInteger )
{
  auto _this = reinterpret_cast<scripting::ScriptedObject*> (ptr);
  delete _this;
  return 0;
}

static SQInteger ScriptedObject_set_action_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'set_action' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::ScriptedObject*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }

  const SQChar* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }

  try {
    _this->set_action(arg0);

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'set_action'"));
    return SQ_ERROR;
  }

}

static SQInteger ScriptedObject_get_action_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'get_action' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::ScriptedObject*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }


  try {
    std::string return_value = _this->get_action();

    sq_pushstring(vm, return_value.c_str(), return_value.size());
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'get_action'"));
    return SQ_ERROR;
  }

}

static SQInteger ScriptedObject_move_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'move' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::ScriptedObject*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }

  SQFloat arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg1;
  if(SQ_FAILED(sq_getfloat(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not a float"));
    return SQ_ERROR;
  }

  try {
    _this->move(static_cast<float> (arg0), static_cast<float> (arg1));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'move'"));
    return SQ_ERROR;
  }

}

static SQInteger ScriptedObject_set_pos_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'set_pos' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::ScriptedObject*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }

  SQFloat arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg1;
  if(SQ_FAILED(sq_getfloat(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not a float"));
    return SQ_ERROR;
  }

  try {
    _this->set_pos(static_cast<float> (arg0), static_cast<float> (arg1));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'set_pos'"));
    return SQ_ERROR;
  }

}

static SQInteger ScriptedObject_get_pos_x_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'get_pos_x' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::ScriptedObject*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }


  try {
    float return_value = _this->get_pos_x();

    sq_pushfloat(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'get_pos_x'"));
    return SQ_ERROR;
  }

}

static SQInteger ScriptedObject_get_pos_y_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'get_pos_y' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::ScriptedObject*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }


  try {
    float return_value = _this->get_pos_y();

    sq_pushfloat(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'get_pos_y'"));
    return SQ_ERROR;
  }

}

static SQInteger ScriptedObject_set_velocity_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'set_velocity' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::ScriptedObject*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }

  SQFloat arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg1;
  if(SQ_FAILED(sq_getfloat(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not a float"));
    return SQ_ERROR;
  }

  try {
    _this->set_velocity(static_cast<float> (arg0), static_cast<float> (arg1));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'set_velocity'"));
    return SQ_ERROR;
  }

}

static SQInteger ScriptedObject_get_velocity_x_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'get_velocity_x' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::ScriptedObject*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }


  try {
    float return_value = _this->get_velocity_x();

    sq_pushfloat(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'get_velocity_x'"));
    return SQ_ERROR;
  }

}

static SQInteger ScriptedObject_get_velocity_y_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'get_velocity_y' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::ScriptedObject*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }


  try {
    float return_value = _this->get_velocity_y();

    sq_pushfloat(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'get_velocity_y'"));
    return SQ_ERROR;
  }

}

static SQInteger ScriptedObject_enable_gravity_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'enable_gravity' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::ScriptedObject*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }

  SQBool arg0;
  if(SQ_FAILED(sq_getbool(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a bool"));
    return SQ_ERROR;
  }

  try {
    _this->enable_gravity(arg0 == SQTrue);

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'enable_gravity'"));
    return SQ_ERROR;
  }

}

static SQInteger ScriptedObject_gravity_enabled_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'gravity_enabled' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::ScriptedObject*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }


  try {
    bool return_value = _this->gravity_enabled();

    sq_pushbool(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'gravity_enabled'"));
    return SQ_ERROR;
  }

}

static SQInteger ScriptedObject_set_visible_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'set_visible' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::ScriptedObject*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }

  SQBool arg0;
  if(SQ_FAILED(sq_getbool(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a bool"));
    return SQ_ERROR;
  }

  try {
    _this->set_visible(arg0 == SQTrue);

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'set_visible'"));
    return SQ_ERROR;
  }

}

static SQInteger ScriptedObject_is_visible_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'is_visible' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::ScriptedObject*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }


  try {
    bool return_value = _this->is_visible();

    sq_pushbool(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'is_visible'"));
    return SQ_ERROR;
  }

}

static SQInteger ScriptedObject_set_solid_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'set_solid' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::ScriptedObject*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }

  SQBool arg0;
  if(SQ_FAILED(sq_getbool(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a bool"));
    return SQ_ERROR;
  }

  try {
    _this->set_solid(arg0 == SQTrue);

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'set_solid'"));
    return SQ_ERROR;
  }

}

static SQInteger ScriptedObject_is_solid_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'is_solid' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::ScriptedObject*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }


  try {
    bool return_value = _this->is_solid();

    sq_pushbool(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'is_solid'"));
    return SQ_ERROR;
  }

}

static SQInteger ScriptedObject_get_name_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'get_name' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::ScriptedObject*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }


  try {
    std::string return_value = _this->get_name();

    sq_pushstring(vm, return_value.c_str(), return_value.size());
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'get_name'"));
    return SQ_ERROR;
  }

}

static SQInteger Sector_release_hook(SQUserPointer ptr, SQInteger )
{
  auto _this = reinterpret_cast<scripting::Sector*> (ptr);
  delete _this;
  return 0;
}

static SQInteger Sector_set_ambient_light_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'set_ambient_light' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::Sector*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }

  SQFloat arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg1;
  if(SQ_FAILED(sq_getfloat(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg2;
  if(SQ_FAILED(sq_getfloat(vm, 4, &arg2))) {
    sq_throwerror(vm, _SC("Argument 3 not a float"));
    return SQ_ERROR;
  }

  try {
    _this->set_ambient_light(static_cast<float> (arg0), static_cast<float> (arg1), static_cast<float> (arg2));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'set_ambient_light'"));
    return SQ_ERROR;
  }

}

static SQInteger Sector_get_ambient_red_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'get_ambient_red' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::Sector*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }


  try {
    float return_value = _this->get_ambient_red();

    sq_pushfloat(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'get_ambient_red'"));
    return SQ_ERROR;
  }

}

static SQInteger Sector_get_ambient_green_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'get_ambient_green' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::Sector*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }


  try {
    float return_value = _this->get_ambient_green();

    sq_pushfloat(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'get_ambient_green'"));
    return SQ_ERROR;
  }

}

static SQInteger Sector_get_ambient_blue_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'get_ambient_blue' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::Sector*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }


  try {
    float return_value = _this->get_ambient_blue();

    sq_pushfloat(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'get_ambient_blue'"));
    return SQ_ERROR;
  }

}

static SQInteger Sector_set_gravity_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'set_gravity' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::Sector*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }

  SQFloat arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }

  try {
    _this->set_gravity(static_cast<float> (arg0));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'set_gravity'"));
    return SQ_ERROR;
  }

}

static SQInteger Sector_set_music_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'set_music' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::Sector*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }

  const SQChar* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }

  try {
    _this->set_music(arg0);

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'set_music'"));
    return SQ_ERROR;
  }

}

static SQInteger Text_release_hook(SQUserPointer ptr, SQInteger )
{
  auto _this = reinterpret_cast<scripting::Text*> (ptr);
  delete _this;
  return 0;
}

static SQInteger Text_set_text_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'set_text' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::Text*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }

  const SQChar* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }

  try {
    _this->set_text(arg0);

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'set_text'"));
    return SQ_ERROR;
  }

}

static SQInteger Text_set_font_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'set_font' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::Text*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }

  const SQChar* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }

  try {
    _this->set_font(arg0);

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'set_font'"));
    return SQ_ERROR;
  }

}

static SQInteger Text_fade_in_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'fade_in' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::Text*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }

  SQFloat arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }

  try {
    _this->fade_in(static_cast<float> (arg0));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'fade_in'"));
    return SQ_ERROR;
  }

}

static SQInteger Text_fade_out_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'fade_out' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::Text*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }

  SQFloat arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }

  try {
    _this->fade_out(static_cast<float> (arg0));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'fade_out'"));
    return SQ_ERROR;
  }

}

static SQInteger Text_set_visible_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'set_visible' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::Text*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }

  SQBool arg0;
  if(SQ_FAILED(sq_getbool(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a bool"));
    return SQ_ERROR;
  }

  try {
    _this->set_visible(arg0 == SQTrue);

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'set_visible'"));
    return SQ_ERROR;
  }

}

static SQInteger Text_set_centered_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'set_centered' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::Text*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }

  SQBool arg0;
  if(SQ_FAILED(sq_getbool(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a bool"));
    return SQ_ERROR;
  }

  try {
    _this->set_centered(arg0 == SQTrue);

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'set_centered'"));
    return SQ_ERROR;
  }

}

static SQInteger Text_set_pos_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'set_pos' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::Text*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }

  SQFloat arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg1;
  if(SQ_FAILED(sq_getfloat(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not a float"));
    return SQ_ERROR;
  }

  try {
    _this->set_pos(static_cast<float> (arg0), static_cast<float> (arg1));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'set_pos'"));
    return SQ_ERROR;
  }

}

static SQInteger Text_get_pos_x_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'get_pos_x' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::Text*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }


  try {
    float return_value = _this->get_pos_x();

    sq_pushfloat(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'get_pos_x'"));
    return SQ_ERROR;
  }

}

static SQInteger Text_get_pos_y_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'get_pos_y' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::Text*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }


  try {
    float return_value = _this->get_pos_y();

    sq_pushfloat(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'get_pos_y'"));
    return SQ_ERROR;
  }

}

static SQInteger Text_set_anchor_point_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'set_anchor_point' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::Text*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }

  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }

  try {
    _this->set_anchor_point(static_cast<int> (arg0));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'set_anchor_point'"));
    return SQ_ERROR;
  }

}

static SQInteger Text_get_anchor_point_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'get_anchor_point' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::Text*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }


  try {
    int return_value = _this->get_anchor_point();

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'get_anchor_point'"));
    return SQ_ERROR;
  }

}

static SQInteger Thunderstorm_release_hook(SQUserPointer ptr, SQInteger )
{
  auto _this = reinterpret_cast<scripting::Thunderstorm*> (ptr);
  delete _this;
  return 0;
}

static SQInteger Thunderstorm_start_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'start' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::Thunderstorm*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }


  try {
    _this->start();

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'start'"));
    return SQ_ERROR;
  }

}

static SQInteger Thunderstorm_stop_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'stop' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::Thunderstorm*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }


  try {
    _this->stop();

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'stop'"));
    return SQ_ERROR;
  }

}

static SQInteger Thunderstorm_thunder_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'thunder' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::Thunderstorm*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }


  try {
    _this->thunder();

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'thunder'"));
    return SQ_ERROR;
  }

}

static SQInteger Thunderstorm_lightning_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'lightning' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::Thunderstorm*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }


  try {
    _this->lightning();

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'lightning'"));
    return SQ_ERROR;
  }

}

static SQInteger Thunderstorm_flash_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'flash' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::Thunderstorm*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }


  try {
    _this->flash();

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'flash'"));
    return SQ_ERROR;
  }

}

static SQInteger Thunderstorm_electrify_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'electrify' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::Thunderstorm*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }


  try {
    _this->electrify();

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'electrify'"));
    return SQ_ERROR;
  }

}

static SQInteger TileMap_release_hook(SQUserPointer ptr, SQInteger )
{
  auto _this = reinterpret_cast<scripting::TileMap*> (ptr);
  delete _this;
  return 0;
}

static SQInteger TileMap_goto_node_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'goto_node' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::TileMap*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }

  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }

  try {
    _this->goto_node(static_cast<int> (arg0));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'goto_node'"));
    return SQ_ERROR;
  }

}

static SQInteger TileMap_start_moving_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'start_moving' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::TileMap*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }


  try {
    _this->start_moving();

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'start_moving'"));
    return SQ_ERROR;
  }

}

static SQInteger TileMap_stop_moving_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'stop_moving' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::TileMap*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }


  try {
    _this->stop_moving();

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'stop_moving'"));
    return SQ_ERROR;
  }

}

static SQInteger TileMap_get_tile_id_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'get_tile_id' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::TileMap*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }

  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg1;
  if(SQ_FAILED(sq_getinteger(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not an integer"));
    return SQ_ERROR;
  }

  try {
    int return_value = _this->get_tile_id(static_cast<int> (arg0), static_cast<int> (arg1));

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'get_tile_id'"));
    return SQ_ERROR;
  }

}

static SQInteger TileMap_get_tile_id_at_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'get_tile_id_at' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::TileMap*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }

  SQFloat arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg1;
  if(SQ_FAILED(sq_getfloat(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not a float"));
    return SQ_ERROR;
  }

  try {
    int return_value = _this->get_tile_id_at(static_cast<float> (arg0), static_cast<float> (arg1));

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'get_tile_id_at'"));
    return SQ_ERROR;
  }

}

static SQInteger TileMap_change_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'change' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::TileMap*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }

  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg1;
  if(SQ_FAILED(sq_getinteger(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg2;
  if(SQ_FAILED(sq_getinteger(vm, 4, &arg2))) {
    sq_throwerror(vm, _SC("Argument 3 not an integer"));
    return SQ_ERROR;
  }

  try {
    _this->change(static_cast<int> (arg0), static_cast<int> (arg1), static_cast<int> (arg2));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'change'"));
    return SQ_ERROR;
  }

}

static SQInteger TileMap_change_at_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'change_at' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::TileMap*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }

  SQFloat arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg1;
  if(SQ_FAILED(sq_getfloat(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not a float"));
    return SQ_ERROR;
  }
  SQInteger arg2;
  if(SQ_FAILED(sq_getinteger(vm, 4, &arg2))) {
    sq_throwerror(vm, _SC("Argument 3 not an integer"));
    return SQ_ERROR;
  }

  try {
    _this->change_at(static_cast<float> (arg0), static_cast<float> (arg1), static_cast<int> (arg2));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'change_at'"));
    return SQ_ERROR;
  }

}

static SQInteger TileMap_fade_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'fade' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::TileMap*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }

  SQFloat arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg1;
  if(SQ_FAILED(sq_getfloat(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not a float"));
    return SQ_ERROR;
  }

  try {
    _this->fade(static_cast<float> (arg0), static_cast<float> (arg1));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'fade'"));
    return SQ_ERROR;
  }

}

static SQInteger TileMap_tint_fade_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'tint_fade' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::TileMap*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }

  SQFloat arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg1;
  if(SQ_FAILED(sq_getfloat(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg2;
  if(SQ_FAILED(sq_getfloat(vm, 4, &arg2))) {
    sq_throwerror(vm, _SC("Argument 3 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg3;
  if(SQ_FAILED(sq_getfloat(vm, 5, &arg3))) {
    sq_throwerror(vm, _SC("Argument 4 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg4;
  if(SQ_FAILED(sq_getfloat(vm, 6, &arg4))) {
    sq_throwerror(vm, _SC("Argument 5 not a float"));
    return SQ_ERROR;
  }

  try {
    _this->tint_fade(static_cast<float> (arg0), static_cast<float> (arg1), static_cast<float> (arg2), static_cast<float> (arg3), static_cast<float> (arg4));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'tint_fade'"));
    return SQ_ERROR;
  }

}

static SQInteger TileMap_set_alpha_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'set_alpha' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::TileMap*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }

  SQFloat arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }

  try {
    _this->set_alpha(static_cast<float> (arg0));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'set_alpha'"));
    return SQ_ERROR;
  }

}

static SQInteger TileMap_get_alpha_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'get_alpha' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::TileMap*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }


  try {
    float return_value = _this->get_alpha();

    sq_pushfloat(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'get_alpha'"));
    return SQ_ERROR;
  }

}

static SQInteger WillOWisp_release_hook(SQUserPointer ptr, SQInteger )
{
  auto _this = reinterpret_cast<scripting::WillOWisp*> (ptr);
  delete _this;
  return 0;
}

static SQInteger WillOWisp_goto_node_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'goto_node' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::WillOWisp*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }

  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }

  try {
    _this->goto_node(static_cast<int> (arg0));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'goto_node'"));
    return SQ_ERROR;
  }

}

static SQInteger WillOWisp_set_state_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'set_state' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::WillOWisp*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }

  const SQChar* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }

  try {
    _this->set_state(arg0);

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'set_state'"));
    return SQ_ERROR;
  }

}

static SQInteger WillOWisp_start_moving_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'start_moving' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::WillOWisp*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }


  try {
    _this->start_moving();

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'start_moving'"));
    return SQ_ERROR;
  }

}

static SQInteger WillOWisp_stop_moving_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'stop_moving' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::WillOWisp*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }


  try {
    _this->stop_moving();

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'stop_moving'"));
    return SQ_ERROR;
  }

}

static SQInteger Wind_release_hook(SQUserPointer ptr, SQInteger )
{
  auto _this = reinterpret_cast<scripting::Wind*> (ptr);
  delete _this;
  return 0;
}

static SQInteger Wind_start_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'start' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::Wind*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }


  try {
    _this->start();

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'start'"));
    return SQ_ERROR;
  }

}

static SQInteger Wind_stop_wrapper(HSQUIRRELVM vm)
{
  SQUserPointer data;
  if(SQ_FAILED(sq_getinstanceup(vm, 1, &data, 0)) || !data) {
    sq_throwerror(vm, _SC("'stop' called without instance"));
    return SQ_ERROR;
  }
  auto _this = reinterpret_cast<scripting::Wind*> (data);

  if (_this == NULL) {
    return SQ_ERROR;
  }


  try {
    _this->stop();

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'stop'"));
    return SQ_ERROR;
  }

}


} // namespace wrapper
void create_squirrel_instance(HSQUIRRELVM v, scripting::AmbientSound* object, bool setup_releasehook)
{
  using namespace wrapper;

  sq_pushroottable(v);
  sq_pushstring(v, "AmbientSound", -1);
  if(SQ_FAILED(sq_get(v, -2))) {
    std::ostringstream msg;
    msg << "Couldn't resolved squirrel type 'AmbientSound'";
    throw SquirrelError(v, msg.str());
  }

  if(SQ_FAILED(sq_createinstance(v, -1)) || SQ_FAILED(sq_setinstanceup(v, -1, object))) {
    std::ostringstream msg;
    msg << "Couldn't setup squirrel instance for object of type 'AmbientSound'";
    throw SquirrelError(v, msg.str());
  }
  sq_remove(v, -2); // remove object name

  if(setup_releasehook) {
    sq_setreleasehook(v, -1, AmbientSound_release_hook);
  }

  sq_remove(v, -2); // remove root table
}




void create_squirrel_instance(HSQUIRRELVM v, scripting::Candle* object, bool setup_releasehook)
{
  using namespace wrapper;

  sq_pushroottable(v);
  sq_pushstring(v, "Candle", -1);
  if(SQ_FAILED(sq_get(v, -2))) {
    std::ostringstream msg;
    msg << "Couldn't resolved squirrel type 'Candle'";
    throw SquirrelError(v, msg.str());
  }

  if(SQ_FAILED(sq_createinstance(v, -1)) || SQ_FAILED(sq_setinstanceup(v, -1, object))) {
    std::ostringstream msg;
    msg << "Couldn't setup squirrel instance for object of type 'Candle'";
    throw SquirrelError(v, msg.str());
  }
  sq_remove(v, -2); // remove object name

  if(setup_releasehook) {
    sq_setreleasehook(v, -1, Candle_release_hook);
  }

  sq_remove(v, -2); // remove root table
}

void create_squirrel_instance(HSQUIRRELVM v, scripting::DisplayEffect* object, bool setup_releasehook)
{
  using namespace wrapper;

  sq_pushroottable(v);
  sq_pushstring(v, "DisplayEffect", -1);
  if(SQ_FAILED(sq_get(v, -2))) {
    std::ostringstream msg;
    msg << "Couldn't resolved squirrel type 'DisplayEffect'";
    throw SquirrelError(v, msg.str());
  }

  if(SQ_FAILED(sq_createinstance(v, -1)) || SQ_FAILED(sq_setinstanceup(v, -1, object))) {
    std::ostringstream msg;
    msg << "Couldn't setup squirrel instance for object of type 'DisplayEffect'";
    throw SquirrelError(v, msg.str());
  }
  sq_remove(v, -2); // remove object name

  if(setup_releasehook) {
    sq_setreleasehook(v, -1, DisplayEffect_release_hook);
  }

  sq_remove(v, -2); // remove root table
}


void create_squirrel_instance(HSQUIRRELVM v, scripting::Gradient* object, bool setup_releasehook)
{
  using namespace wrapper;

  sq_pushroottable(v);
  sq_pushstring(v, "Gradient", -1);
  if(SQ_FAILED(sq_get(v, -2))) {
    std::ostringstream msg;
    msg << "Couldn't resolved squirrel type 'Gradient'";
    throw SquirrelError(v, msg.str());
  }

  if(SQ_FAILED(sq_createinstance(v, -1)) || SQ_FAILED(sq_setinstanceup(v, -1, object))) {
    std::ostringstream msg;
    msg << "Couldn't setup squirrel instance for object of type 'Gradient'";
    throw SquirrelError(v, msg.str());
  }
  sq_remove(v, -2); // remove object name

  if(setup_releasehook) {
    sq_setreleasehook(v, -1, Gradient_release_hook);
  }

  sq_remove(v, -2); // remove root table
}

void create_squirrel_instance(HSQUIRRELVM v, scripting::Inventory* object, bool setup_releasehook)
{
  using namespace wrapper;

  sq_pushroottable(v);
  sq_pushstring(v, "Inventory", -1);
  if(SQ_FAILED(sq_get(v, -2))) {
    std::ostringstream msg;
    msg << "Couldn't resolved squirrel type 'Inventory'";
    throw SquirrelError(v, msg.str());
  }

  if(SQ_FAILED(sq_createinstance(v, -1)) || SQ_FAILED(sq_setinstanceup(v, -1, object))) {
    std::ostringstream msg;
    msg << "Couldn't setup squirrel instance for object of type 'Inventory'";
    throw SquirrelError(v, msg.str());
  }
  sq_remove(v, -2); // remove object name

  if(setup_releasehook) {
    sq_setreleasehook(v, -1, Inventory_release_hook);
  }

  sq_remove(v, -2); // remove root table
}

void create_squirrel_instance(HSQUIRRELVM v, scripting::LevelTime* object, bool setup_releasehook)
{
  using namespace wrapper;

  sq_pushroottable(v);
  sq_pushstring(v, "LevelTime", -1);
  if(SQ_FAILED(sq_get(v, -2))) {
    std::ostringstream msg;
    msg << "Couldn't resolved squirrel type 'LevelTime'";
    throw SquirrelError(v, msg.str());
  }

  if(SQ_FAILED(sq_createinstance(v, -1)) || SQ_FAILED(sq_setinstanceup(v, -1, object))) {
    std::ostringstream msg;
    msg << "Couldn't setup squirrel instance for object of type 'LevelTime'";
    throw SquirrelError(v, msg.str());
  }
  sq_remove(v, -2); // remove object name

  if(setup_releasehook) {
    sq_setreleasehook(v, -1, LevelTime_release_hook);
  }

  sq_remove(v, -2); // remove root table
}

void create_squirrel_instance(HSQUIRRELVM v, scripting::ParticleSystem* object, bool setup_releasehook)
{
  using namespace wrapper;

  sq_pushroottable(v);
  sq_pushstring(v, "ParticleSystem", -1);
  if(SQ_FAILED(sq_get(v, -2))) {
    std::ostringstream msg;
    msg << "Couldn't resolved squirrel type 'ParticleSystem'";
    throw SquirrelError(v, msg.str());
  }

  if(SQ_FAILED(sq_createinstance(v, -1)) || SQ_FAILED(sq_setinstanceup(v, -1, object))) {
    std::ostringstream msg;
    msg << "Couldn't setup squirrel instance for object of type 'ParticleSystem'";
    throw SquirrelError(v, msg.str());
  }
  sq_remove(v, -2); // remove object name

  if(setup_releasehook) {
    sq_setreleasehook(v, -1, ParticleSystem_release_hook);
  }

  sq_remove(v, -2); // remove root table
}

void create_squirrel_instance(HSQUIRRELVM v, scripting::Platform* object, bool setup_releasehook)
{
  using namespace wrapper;

  sq_pushroottable(v);
  sq_pushstring(v, "Platform", -1);
  if(SQ_FAILED(sq_get(v, -2))) {
    std::ostringstream msg;
    msg << "Couldn't resolved squirrel type 'Platform'";
    throw SquirrelError(v, msg.str());
  }

  if(SQ_FAILED(sq_createinstance(v, -1)) || SQ_FAILED(sq_setinstanceup(v, -1, object))) {
    std::ostringstream msg;
    msg << "Couldn't setup squirrel instance for object of type 'Platform'";
    throw SquirrelError(v, msg.str());
  }
  sq_remove(v, -2); // remove object name

  if(setup_releasehook) {
    sq_setreleasehook(v, -1, Platform_release_hook);
  }

  sq_remove(v, -2); // remove root table
}


void create_squirrel_instance(HSQUIRRELVM v, scripting::ScriptedObject* object, bool setup_releasehook)
{
  using namespace wrapper;

  sq_pushroottable(v);
  sq_pushstring(v, "ScriptedObject", -1);
  if(SQ_FAILED(sq_get(v, -2))) {
    std::ostringstream msg;
    msg << "Couldn't resolved squirrel type 'ScriptedObject'";
    throw SquirrelError(v, msg.str());
  }

  if(SQ_FAILED(sq_createinstance(v, -1)) || SQ_FAILED(sq_setinstanceup(v, -1, object))) {
    std::ostringstream msg;
    msg << "Couldn't setup squirrel instance for object of type 'ScriptedObject'";
    throw SquirrelError(v, msg.str());
  }
  sq_remove(v, -2); // remove object name

  if(setup_releasehook) {
    sq_setreleasehook(v, -1, ScriptedObject_release_hook);
  }

  sq_remove(v, -2); // remove root table
}

void create_squirrel_instance(HSQUIRRELVM v, scripting::Sector* object, bool setup_releasehook)
{
  using namespace wrapper;

  sq_pushroottable(v);
  sq_pushstring(v, "Sector", -1);
  if(SQ_FAILED(sq_get(v, -2))) {
    std::ostringstream msg;
    msg << "Couldn't resolved squirrel type 'Sector'";
    throw SquirrelError(v, msg.str());
  }

  if(SQ_FAILED(sq_createinstance(v, -1)) || SQ_FAILED(sq_setinstanceup(v, -1, object))) {
    std::ostringstream msg;
    msg << "Couldn't setup squirrel instance for object of type 'Sector'";
    throw SquirrelError(v, msg.str());
  }
  sq_remove(v, -2); // remove object name

  if(setup_releasehook) {
    sq_setreleasehook(v, -1, Sector_release_hook);
  }

  sq_remove(v, -2); // remove root table
}

void create_squirrel_instance(HSQUIRRELVM v, scripting::Text* object, bool setup_releasehook)
{
  using namespace wrapper;

  sq_pushroottable(v);
  sq_pushstring(v, "Text", -1);
  if(SQ_FAILED(sq_get(v, -2))) {
    std::ostringstream msg;
    msg << "Couldn't resolved squirrel type 'Text'";
    throw SquirrelError(v, msg.str());
  }

  if(SQ_FAILED(sq_createinstance(v, -1)) || SQ_FAILED(sq_setinstanceup(v, -1, object))) {
    std::ostringstream msg;
    msg << "Couldn't setup squirrel instance for object of type 'Text'";
    throw SquirrelError(v, msg.str());
  }
  sq_remove(v, -2); // remove object name

  if(setup_releasehook) {
    sq_setreleasehook(v, -1, Text_release_hook);
  }

  sq_remove(v, -2); // remove root table
}

void create_squirrel_instance(HSQUIRRELVM v, scripting::Thunderstorm* object, bool setup_releasehook)
{
  using namespace wrapper;

  sq_pushroottable(v);
  sq_pushstring(v, "Thunderstorm", -1);
  if(SQ_FAILED(sq_get(v, -2))) {
    std::ostringstream msg;
    msg << "Couldn't resolved squirrel type 'Thunderstorm'";
    throw SquirrelError(v, msg.str());
  }

  if(SQ_FAILED(sq_createinstance(v, -1)) || SQ_FAILED(sq_setinstanceup(v, -1, object))) {
    std::ostringstream msg;
    msg << "Couldn't setup squirrel instance for object of type 'Thunderstorm'";
    throw SquirrelError(v, msg.str());
  }
  sq_remove(v, -2); // remove object name

  if(setup_releasehook) {
    sq_setreleasehook(v, -1, Thunderstorm_release_hook);
  }

  sq_remove(v, -2); // remove root table
}

void create_squirrel_instance(HSQUIRRELVM v, scripting::TileMap* object, bool setup_releasehook)
{
  using namespace wrapper;

  sq_pushroottable(v);
  sq_pushstring(v, "TileMap", -1);
  if(SQ_FAILED(sq_get(v, -2))) {
    std::ostringstream msg;
    msg << "Couldn't resolved squirrel type 'TileMap'";
    throw SquirrelError(v, msg.str());
  }

  if(SQ_FAILED(sq_createinstance(v, -1)) || SQ_FAILED(sq_setinstanceup(v, -1, object))) {
    std::ostringstream msg;
    msg << "Couldn't setup squirrel instance for object of type 'TileMap'";
    throw SquirrelError(v, msg.str());
  }
  sq_remove(v, -2); // remove object name

  if(setup_releasehook) {
    sq_setreleasehook(v, -1, TileMap_release_hook);
  }

  sq_remove(v, -2); // remove root table
}

void create_squirrel_instance(HSQUIRRELVM v, scripting::WillOWisp* object, bool setup_releasehook)
{
  using namespace wrapper;

  sq_pushroottable(v);
  sq_pushstring(v, "WillOWisp", -1);
  if(SQ_FAILED(sq_get(v, -2))) {
    std::ostringstream msg;
    msg << "Couldn't resolved squirrel type 'WillOWisp'";
    throw SquirrelError(v, msg.str());
  }

  if(SQ_FAILED(sq_createinstance(v, -1)) || SQ_FAILED(sq_setinstanceup(v, -1, object))) {
    std::ostringstream msg;
    msg << "Couldn't setup squirrel instance for object of type 'WillOWisp'";
    throw SquirrelError(v, msg.str());
  }
  sq_remove(v, -2); // remove object name

  if(setup_releasehook) {
    sq_setreleasehook(v, -1, WillOWisp_release_hook);
  }

  sq_remove(v, -2); // remove root table
}

void create_squirrel_instance(HSQUIRRELVM v, scripting::Wind* object, bool setup_releasehook)
{
  using namespace wrapper;

  sq_pushroottable(v);
  sq_pushstring(v, "Wind", -1);
  if(SQ_FAILED(sq_get(v, -2))) {
    std::ostringstream msg;
    msg << "Couldn't resolved squirrel type 'Wind'";
    throw SquirrelError(v, msg.str());
  }

  if(SQ_FAILED(sq_createinstance(v, -1)) || SQ_FAILED(sq_setinstanceup(v, -1, object))) {
    std::ostringstream msg;
    msg << "Couldn't setup squirrel instance for object of type 'Wind'";
    throw SquirrelError(v, msg.str());
  }
  sq_remove(v, -2); // remove object name

  if(setup_releasehook) {
    sq_setreleasehook(v, -1, Wind_release_hook);
  }

  sq_remove(v, -2); // remove root table
}
#include "object/player.hpp"

void register_supertux_wrapper(HSQUIRRELVM v)
{
  using namespace Sqrat;
  Class<Player,NoCopy<Player>> myClass(v,"Player");
  myClass.Func("add_coins",&Player::add_coins);
  myClass.Func("trigger_sequence",(void (Player::*)(const std::string&))&Player::trigger_sequence);
  myClass.Func("add_bonus",(bool (Player::*)(const std::string&))&Player::add_bonus);
  myClass.Func("set_bonus",(bool (Player::*)(const std::string&))&Player::set_bonus);
  myClass.Func("make_invincible",&Player::make_invincible);
  myClass.Func("deactivate",&Player::deactivate);
  myClass.Func("activate",&Player::activate);
  myClass.Func("walk",&Player::walk);
  myClass.Func("set_dir",&Player::set_dir);
  myClass.Func("set_visible",&Player::set_visible);
  myClass.Func("get_visible",&Player::get_visible);
  myClass.Func("kill",&Player::kill);
  myClass.Func("set_ghost_mode",&Player::set_ghost_mode);
  myClass.Func("get_ghost_mode",&Player::get_ghost_mode);
  myClass.Func("kick",&Player::kick);
  myClass.Func("do_cheer",&Player::do_cheer);
  myClass.Func("do_duck",&Player::do_duck);
  myClass.Func("do_standup",&Player::do_standup);
  myClass.Func("do_backflip",&Player::do_backflip);
  myClass.Func("do_jump",&Player::do_jump);
  myClass.Func("use_scripting_controller",&Player::use_scripting_controller);
  myClass.Func("do_scripting_controller",&Player::do_scripting_controller);
  Class<Player,NoCopy<Player>> c_Player(v,"Player");
c_Player.Func("use_scripting_controller",&Player::use_scripting_controller);
c_Player.Func("do_scripting_controller",&Player::do_scripting_controller);
c_Player.Func("add_bonus",(bool (Player::*) (const std::string &) ) &Player::add_bonus);
c_Player.Func("set_bonus",(bool (Player::*) (const std::string &) ) &Player::set_bonus);
c_Player.Func("add_coins",&Player::add_coins);
c_Player.Func("get_coins",&Player::get_coins);
c_Player.Func("kick",&Player::kick);
c_Player.Func("do_cheer",&Player::do_cheer);
c_Player.Func("do_duck",&Player::do_duck);
c_Player.Func("do_standup",&Player::do_standup);
c_Player.Func("do_backflip",&Player::do_backflip);
c_Player.Func("do_jump",&Player::do_jump);
c_Player.Func("get_velocity_x",&Player::get_velocity_x);
c_Player.Func("get_velocity_y",&Player::get_velocity_y);
c_Player.Func("set_ghost_mode",&Player::set_ghost_mode);
c_Player.Func("set_edit_mode",&Player::set_edit_mode);
c_Player.Func("trigger_sequence",(void (Player::*) (const std::string &) ) &Player::trigger_sequence);
Class<Background,NoCopy<Background>> c_Background(v,"Background");
c_Background.Func("set_image",(void (Background::*) (const std::string &) ) &Background::set_image);
c_Background.Overload("set_image",(void (Background::*) (const std::string &,float) ) &Background::set_image);
c_Background.Func("set_images",&Background::set_images);

  RootTable(v).Func("set_game_speed",&set_game_speed);
  RootTable(v).Func("whereami",&whereami);
  RootTable(v).Func("abort_screenfade",&abort_screenfade);
  RootTable(v).Func("warp",&warp);
  RootTable(v).Func("fadeout_screen",&fadeout_screen);
  RootTable(v).SquirrelFunc("import",&import);
  RootTable(v).Func("load_state",&load_state);
  RootTable(v).Func("translate",&translate);
  RootTable(v).Func("debug_draw_editor_images",&debug_draw_editor_images);
  RootTable(v).SquirrelFunc("store",&store);
  RootTable(v).Func("invincible",&invincible);
  RootTable(v).Func("debug_collrects",&debug_collrects);
  RootTable(v).Func("play_music",&play_music);
  RootTable(v).Func("mortal",&mortal);
  RootTable(v).Func("exit_screen",&exit_screen);
  RootTable(v).Func("quit",&quit);
  RootTable(v).SquirrelFunc("load",&load);
  RootTable(v).Func("set_gamma",&set_gamma);
  RootTable(v).Func("grease",&grease);
  RootTable(v).Func("rand",&rand);
  RootTable(v).Func("debug_draw_solids_only",&debug_draw_solids_only);
  RootTable(v).Func("play_sound",&play_sound);
  RootTable(v).SquirrelFunc("is_christmas",&is_christmas);
  RootTable(v).SquirrelFunc("print_stacktrace",&print_stacktrace);
  RootTable(v).SquirrelFunc("display",&display);
  RootTable(v).SquirrelFunc("wait_for_screenswitch",&wait_for_screenswitch);
  RootTable(v).Func("debug_worldmap_ghost",&debug_worldmap_ghost);
  RootTable(v).Func("save_state",&save_state);
  RootTable(v).SquirrelFunc("wait",&wait);
  RootTable(v).Func("shrink_screen",&shrink_screen);
  RootTable(v).Func("load_worldmap",&load_worldmap);
  RootTable(v).Func("camera",&camera);
  RootTable(v).SquirrelFunc("get_current_thread",&get_current_thread);
  RootTable(v).Func("restart",&restart);
  RootTable(v).Func("display_text_file",&display_text_file);
  RootTable(v).Func("ghost",&ghost);
  RootTable(v).Func("gotoend",&gotoend);
  RootTable(v).Func("_",&_);
  RootTable(v).Func("load_level",&load_level);
  RootTable(v).Func("play_demo",&play_demo);
  RootTable(v).Func("record_demo",&record_demo);
  RootTable(v).Func("debug_show_fps",&debug_show_fps);
  RootTable(v).Func("Level_flip_vertically",&Level_flip_vertically);
  RootTable(v).Func("Level_edit",&Level_edit);
  RootTable(v).Func("Level_spawn",&Level_spawn);
  RootTable(v).Func("Level_finish",&Level_finish);
  RootTable(v).Func("Level_toggle_pause",&Level_toggle_pause);
  Class<Candle,NoCopy<Candle>> c_Candle(v,"Candle");
  c_Candle.Func("get_burning",&Candle::get_burning);
  c_Candle.Func("set_burning",&Candle::set_burning);
  Class<FloatingImage,DefaultAllocator<FloatingImage>> c_FloatingImage(v,"FloatingImage");
c_FloatingImage.Func("set_layer",&FloatingImage::set_layer);
c_FloatingImage.Func("get_layer",&FloatingImage::get_layer);
c_FloatingImage.Func("set_anchor_point",&FloatingImage::set_anchor_point);
c_FloatingImage.Func("set_pos",(void (FloatingImage::*) (float,float) ) &FloatingImage::set_pos);
c_FloatingImage.Func("get_pos_x",&FloatingImage::get_pos_x);
c_FloatingImage.Func("get_pos_y",&FloatingImage::get_pos_y);
c_FloatingImage.Func("get_anchor_point",&FloatingImage::get_anchor_point);
c_FloatingImage.Func("set_action",&FloatingImage::set_action);
c_FloatingImage.Func("get_action",&FloatingImage::get_action);
c_FloatingImage.Func("fade_in",&FloatingImage::fade_in);
c_FloatingImage.Func("fade_out",&FloatingImage::fade_out);

  using namespace wrapper;

  sq_pushstring(v, "ANCHOR_TOP", -1);
  sq_pushinteger(v, 16);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register constant 'ANCHOR_TOP'");
  }

  sq_pushstring(v, "ANCHOR_BOTTOM", -1);
  sq_pushinteger(v, 32);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register constant 'ANCHOR_BOTTOM'");
  }

  sq_pushstring(v, "ANCHOR_LEFT", -1);
  sq_pushinteger(v, 1);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register constant 'ANCHOR_LEFT'");
  }

  sq_pushstring(v, "ANCHOR_RIGHT", -1);
  sq_pushinteger(v, 2);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register constant 'ANCHOR_RIGHT'");
  }

  sq_pushstring(v, "ANCHOR_MIDDLE", -1);
  sq_pushinteger(v, 0);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register constant 'ANCHOR_MIDDLE'");
  }

  sq_pushstring(v, "ANCHOR_TOP_LEFT", -1);
  sq_pushinteger(v, 17);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register constant 'ANCHOR_TOP_LEFT'");
  }

  sq_pushstring(v, "ANCHOR_TOP_RIGHT", -1);
  sq_pushinteger(v, 18);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register constant 'ANCHOR_TOP_RIGHT'");
  }

  sq_pushstring(v, "ANCHOR_BOTTOM_LEFT", -1);
  sq_pushinteger(v, 33);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register constant 'ANCHOR_BOTTOM_LEFT'");
  }

  sq_pushstring(v, "ANCHOR_BOTTOM_RIGHT", -1);
  sq_pushinteger(v, 34);
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register constant 'ANCHOR_BOTTOM_RIGHT'");
  }
using namespace wrapper;



  // Register class AmbientSound
  sq_pushstring(v, "AmbientSound", -1);
  if(sq_newclass(v, SQFalse) < 0) {
    std::ostringstream msg;
    msg << "Couldn't create new class 'AmbientSound'";
    throw SquirrelError(v, msg.str());
  }
  sq_pushstring(v, "set_pos", -1);
  sq_newclosure(v, &AmbientSound_set_pos_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|tnn");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'set_pos'");
  }

  sq_pushstring(v, "get_pos_x", -1);
  sq_newclosure(v, &AmbientSound_get_pos_x_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|t");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'get_pos_x'");
  }

  sq_pushstring(v, "get_pos_y", -1);
  sq_newclosure(v, &AmbientSound_get_pos_y_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|t");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'get_pos_y'");
  }

  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register class 'AmbientSound'");
  }



  // Register class Candle
  sq_pushstring(v, "Candle", -1);
  if(sq_newclass(v, SQFalse) < 0) {
    std::ostringstream msg;
    msg << "Couldn't create new class 'Candle'";
    throw SquirrelError(v, msg.str());
  }
  sq_pushstring(v, "get_burning", -1);
  sq_newclosure(v, &Candle_get_burning_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|t");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'get_burning'");
  }

  sq_pushstring(v, "set_burning", -1);
  sq_newclosure(v, &Candle_set_burning_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|tb");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'set_burning'");
  }

  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register class 'Candle'");
  }

  // Register class DisplayEffect
  sq_pushstring(v, "DisplayEffect", -1);
  if(sq_newclass(v, SQFalse) < 0) {
    std::ostringstream msg;
    msg << "Couldn't create new class 'DisplayEffect'";
    throw SquirrelError(v, msg.str());
  }
  sq_pushstring(v, "fade_out", -1);
  sq_newclosure(v, &DisplayEffect_fade_out_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|tn");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'fade_out'");
  }

  sq_pushstring(v, "fade_in", -1);
  sq_newclosure(v, &DisplayEffect_fade_in_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|tn");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'fade_in'");
  }

  sq_pushstring(v, "set_black", -1);
  sq_newclosure(v, &DisplayEffect_set_black_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|tb");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'set_black'");
  }

  sq_pushstring(v, "is_black", -1);
  sq_newclosure(v, &DisplayEffect_is_black_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|t");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'is_black'");
  }

  sq_pushstring(v, "sixteen_to_nine", -1);
  sq_newclosure(v, &DisplayEffect_sixteen_to_nine_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|tn");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'sixteen_to_nine'");
  }

  sq_pushstring(v, "four_to_three", -1);
  sq_newclosure(v, &DisplayEffect_four_to_three_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|tn");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'four_to_three'");
  }

  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register class 'DisplayEffect'");
  }


  // Register class Gradient
  sq_pushstring(v, "Gradient", -1);
  if(sq_newclass(v, SQFalse) < 0) {
    std::ostringstream msg;
    msg << "Couldn't create new class 'Gradient'";
    throw SquirrelError(v, msg.str());
  }
  sq_pushstring(v, "set_direction", -1);
  sq_newclosure(v, &Gradient_set_direction_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|ts");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'set_direction'");
  }

  sq_pushstring(v, "get_direction", -1);
  sq_newclosure(v, &Gradient_get_direction_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|t");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'get_direction'");
  }

  sq_pushstring(v, "set_color1", -1);
  sq_newclosure(v, &Gradient_set_color1_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|tnnn");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'set_color1'");
  }

  sq_pushstring(v, "set_color2", -1);
  sq_newclosure(v, &Gradient_set_color2_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|tnnn");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'set_color2'");
  }

  sq_pushstring(v, "swap_colors", -1);
  sq_newclosure(v, &Gradient_swap_colors_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|t");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'swap_colors'");
  }

  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register class 'Gradient'");
  }

  // Register class Inventory
  sq_pushstring(v, "Inventory", -1);
  if(sq_newclass(v, SQFalse) < 0) {
    std::ostringstream msg;
    msg << "Couldn't create new class 'Inventory'";
    throw SquirrelError(v, msg.str());
  }
  sq_pushstring(v, "constructor", -1);
  sq_newclosure(v, &Inventory_constructor_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|t");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'constructor'");
  }

  sq_pushstring(v, "hasItem", -1);
  sq_newclosure(v, &Inventory_hasItem_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|ts");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'hasItem'");
  }

  sq_pushstring(v, "isInventoryItem", -1);
  sq_newclosure(v, &Inventory_isInventoryItem_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|t");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'isInventoryItem'");
  }

  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register class 'Inventory'");
  }

  // Register class LevelTime
  sq_pushstring(v, "LevelTime", -1);
  if(sq_newclass(v, SQFalse) < 0) {
    std::ostringstream msg;
    msg << "Couldn't create new class 'LevelTime'";
    throw SquirrelError(v, msg.str());
  }
  sq_pushstring(v, "start", -1);
  sq_newclosure(v, &LevelTime_start_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|t");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'start'");
  }

  sq_pushstring(v, "stop", -1);
  sq_newclosure(v, &LevelTime_stop_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|t");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'stop'");
  }

  sq_pushstring(v, "get_time", -1);
  sq_newclosure(v, &LevelTime_get_time_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|t");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'get_time'");
  }

  sq_pushstring(v, "set_time", -1);
  sq_newclosure(v, &LevelTime_set_time_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|tn");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'set_time'");
  }

  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register class 'LevelTime'");
  }

  // Register class ParticleSystem
  sq_pushstring(v, "ParticleSystem", -1);
  if(sq_newclass(v, SQFalse) < 0) {
    std::ostringstream msg;
    msg << "Couldn't create new class 'ParticleSystem'";
    throw SquirrelError(v, msg.str());
  }
  sq_pushstring(v, "set_enabled", -1);
  sq_newclosure(v, &ParticleSystem_set_enabled_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|tb");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'set_enabled'");
  }

  sq_pushstring(v, "get_enabled", -1);
  sq_newclosure(v, &ParticleSystem_get_enabled_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|t");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'get_enabled'");
  }

  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register class 'ParticleSystem'");
  }

  // Register class Platform
  sq_pushstring(v, "Platform", -1);
  if(sq_newclass(v, SQFalse) < 0) {
    std::ostringstream msg;
    msg << "Couldn't create new class 'Platform'";
    throw SquirrelError(v, msg.str());
  }
  sq_pushstring(v, "goto_node", -1);
  sq_newclosure(v, &Platform_goto_node_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|ti");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'goto_node'");
  }

  sq_pushstring(v, "start_moving", -1);
  sq_newclosure(v, &Platform_start_moving_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|t");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'start_moving'");
  }

  sq_pushstring(v, "stop_moving", -1);
  sq_newclosure(v, &Platform_stop_moving_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|t");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'stop_moving'");
  }

  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register class 'Platform'");
  }

  // Register class ScriptedObject
  sq_pushstring(v, "ScriptedObject", -1);
  if(sq_newclass(v, SQFalse) < 0) {
    std::ostringstream msg;
    msg << "Couldn't create new class 'ScriptedObject'";
    throw SquirrelError(v, msg.str());
  }
  sq_pushstring(v, "set_action", -1);
  sq_newclosure(v, &ScriptedObject_set_action_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|ts");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'set_action'");
  }

  sq_pushstring(v, "get_action", -1);
  sq_newclosure(v, &ScriptedObject_get_action_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|t");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'get_action'");
  }

  sq_pushstring(v, "move", -1);
  sq_newclosure(v, &ScriptedObject_move_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|tnn");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'move'");
  }

  sq_pushstring(v, "set_pos", -1);
  sq_newclosure(v, &ScriptedObject_set_pos_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|tnn");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'set_pos'");
  }

  sq_pushstring(v, "get_pos_x", -1);
  sq_newclosure(v, &ScriptedObject_get_pos_x_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|t");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'get_pos_x'");
  }

  sq_pushstring(v, "get_pos_y", -1);
  sq_newclosure(v, &ScriptedObject_get_pos_y_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|t");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'get_pos_y'");
  }

  sq_pushstring(v, "set_velocity", -1);
  sq_newclosure(v, &ScriptedObject_set_velocity_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|tnn");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'set_velocity'");
  }

  sq_pushstring(v, "get_velocity_x", -1);
  sq_newclosure(v, &ScriptedObject_get_velocity_x_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|t");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'get_velocity_x'");
  }

  sq_pushstring(v, "get_velocity_y", -1);
  sq_newclosure(v, &ScriptedObject_get_velocity_y_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|t");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'get_velocity_y'");
  }

  sq_pushstring(v, "enable_gravity", -1);
  sq_newclosure(v, &ScriptedObject_enable_gravity_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|tb");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'enable_gravity'");
  }

  sq_pushstring(v, "gravity_enabled", -1);
  sq_newclosure(v, &ScriptedObject_gravity_enabled_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|t");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'gravity_enabled'");
  }

  sq_pushstring(v, "set_visible", -1);
  sq_newclosure(v, &ScriptedObject_set_visible_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|tb");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'set_visible'");
  }

  sq_pushstring(v, "is_visible", -1);
  sq_newclosure(v, &ScriptedObject_is_visible_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|t");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'is_visible'");
  }

  sq_pushstring(v, "set_solid", -1);
  sq_newclosure(v, &ScriptedObject_set_solid_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|tb");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'set_solid'");
  }

  sq_pushstring(v, "is_solid", -1);
  sq_newclosure(v, &ScriptedObject_is_solid_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|t");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'is_solid'");
  }

  sq_pushstring(v, "get_name", -1);
  sq_newclosure(v, &ScriptedObject_get_name_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|t");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'get_name'");
  }

  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register class 'ScriptedObject'");
  }

  // Register class Sector
  sq_pushstring(v, "Sector", -1);
  if(sq_newclass(v, SQFalse) < 0) {
    std::ostringstream msg;
    msg << "Couldn't create new class 'Sector'";
    throw SquirrelError(v, msg.str());
  }
  sq_pushstring(v, "set_ambient_light", -1);
  sq_newclosure(v, &Sector_set_ambient_light_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|tnnn");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'set_ambient_light'");
  }

  sq_pushstring(v, "get_ambient_red", -1);
  sq_newclosure(v, &Sector_get_ambient_red_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|t");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'get_ambient_red'");
  }

  sq_pushstring(v, "get_ambient_green", -1);
  sq_newclosure(v, &Sector_get_ambient_green_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|t");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'get_ambient_green'");
  }

  sq_pushstring(v, "get_ambient_blue", -1);
  sq_newclosure(v, &Sector_get_ambient_blue_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|t");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'get_ambient_blue'");
  }

  sq_pushstring(v, "set_gravity", -1);
  sq_newclosure(v, &Sector_set_gravity_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|tn");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'set_gravity'");
  }

  sq_pushstring(v, "set_music", -1);
  sq_newclosure(v, &Sector_set_music_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|ts");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'set_music'");
  }

  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register class 'Sector'");
  }

  // Register class Text
  sq_pushstring(v, "Text", -1);
  if(sq_newclass(v, SQFalse) < 0) {
    std::ostringstream msg;
    msg << "Couldn't create new class 'Text'";
    throw SquirrelError(v, msg.str());
  }
  sq_pushstring(v, "set_text", -1);
  sq_newclosure(v, &Text_set_text_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|ts");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'set_text'");
  }

  sq_pushstring(v, "set_font", -1);
  sq_newclosure(v, &Text_set_font_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|ts");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'set_font'");
  }

  sq_pushstring(v, "fade_in", -1);
  sq_newclosure(v, &Text_fade_in_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|tn");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'fade_in'");
  }

  sq_pushstring(v, "fade_out", -1);
  sq_newclosure(v, &Text_fade_out_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|tn");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'fade_out'");
  }

  sq_pushstring(v, "set_visible", -1);
  sq_newclosure(v, &Text_set_visible_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|tb");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'set_visible'");
  }

  sq_pushstring(v, "set_centered", -1);
  sq_newclosure(v, &Text_set_centered_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|tb");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'set_centered'");
  }

  sq_pushstring(v, "set_pos", -1);
  sq_newclosure(v, &Text_set_pos_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|tnn");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'set_pos'");
  }

  sq_pushstring(v, "get_pos_x", -1);
  sq_newclosure(v, &Text_get_pos_x_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|t");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'get_pos_x'");
  }

  sq_pushstring(v, "get_pos_y", -1);
  sq_newclosure(v, &Text_get_pos_y_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|t");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'get_pos_y'");
  }

  sq_pushstring(v, "set_anchor_point", -1);
  sq_newclosure(v, &Text_set_anchor_point_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|ti");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'set_anchor_point'");
  }

  sq_pushstring(v, "get_anchor_point", -1);
  sq_newclosure(v, &Text_get_anchor_point_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|t");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'get_anchor_point'");
  }

  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register class 'Text'");
  }

  // Register class Thunderstorm
  sq_pushstring(v, "Thunderstorm", -1);
  if(sq_newclass(v, SQFalse) < 0) {
    std::ostringstream msg;
    msg << "Couldn't create new class 'Thunderstorm'";
    throw SquirrelError(v, msg.str());
  }
  sq_pushstring(v, "start", -1);
  sq_newclosure(v, &Thunderstorm_start_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|t");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'start'");
  }

  sq_pushstring(v, "stop", -1);
  sq_newclosure(v, &Thunderstorm_stop_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|t");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'stop'");
  }

  sq_pushstring(v, "thunder", -1);
  sq_newclosure(v, &Thunderstorm_thunder_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|t");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'thunder'");
  }

  sq_pushstring(v, "lightning", -1);
  sq_newclosure(v, &Thunderstorm_lightning_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|t");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'lightning'");
  }

  sq_pushstring(v, "flash", -1);
  sq_newclosure(v, &Thunderstorm_flash_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|t");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'flash'");
  }

  sq_pushstring(v, "electrify", -1);
  sq_newclosure(v, &Thunderstorm_electrify_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|t");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'electrify'");
  }

  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register class 'Thunderstorm'");
  }

  // Register class TileMap
  sq_pushstring(v, "TileMap", -1);
  if(sq_newclass(v, SQFalse) < 0) {
    std::ostringstream msg;
    msg << "Couldn't create new class 'TileMap'";
    throw SquirrelError(v, msg.str());
  }
  sq_pushstring(v, "goto_node", -1);
  sq_newclosure(v, &TileMap_goto_node_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|ti");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'goto_node'");
  }

  sq_pushstring(v, "start_moving", -1);
  sq_newclosure(v, &TileMap_start_moving_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|t");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'start_moving'");
  }

  sq_pushstring(v, "stop_moving", -1);
  sq_newclosure(v, &TileMap_stop_moving_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|t");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'stop_moving'");
  }

  sq_pushstring(v, "get_tile_id", -1);
  sq_newclosure(v, &TileMap_get_tile_id_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|tii");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'get_tile_id'");
  }

  sq_pushstring(v, "get_tile_id_at", -1);
  sq_newclosure(v, &TileMap_get_tile_id_at_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|tnn");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'get_tile_id_at'");
  }

  sq_pushstring(v, "change", -1);
  sq_newclosure(v, &TileMap_change_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|tiii");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'change'");
  }

  sq_pushstring(v, "change_at", -1);
  sq_newclosure(v, &TileMap_change_at_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|tnni");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'change_at'");
  }

  sq_pushstring(v, "fade", -1);
  sq_newclosure(v, &TileMap_fade_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|tnn");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'fade'");
  }

  sq_pushstring(v, "tint_fade", -1);
  sq_newclosure(v, &TileMap_tint_fade_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|tnnnnn");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'tint_fade'");
  }

  sq_pushstring(v, "set_alpha", -1);
  sq_newclosure(v, &TileMap_set_alpha_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|tn");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'set_alpha'");
  }

  sq_pushstring(v, "get_alpha", -1);
  sq_newclosure(v, &TileMap_get_alpha_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|t");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'get_alpha'");
  }

  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register class 'TileMap'");
  }

  // Register class WillOWisp
  sq_pushstring(v, "WillOWisp", -1);
  if(sq_newclass(v, SQFalse) < 0) {
    std::ostringstream msg;
    msg << "Couldn't create new class 'WillOWisp'";
    throw SquirrelError(v, msg.str());
  }
  sq_pushstring(v, "goto_node", -1);
  sq_newclosure(v, &WillOWisp_goto_node_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|ti");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'goto_node'");
  }

  sq_pushstring(v, "set_state", -1);
  sq_newclosure(v, &WillOWisp_set_state_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|ts");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'set_state'");
  }

  sq_pushstring(v, "start_moving", -1);
  sq_newclosure(v, &WillOWisp_start_moving_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|t");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'start_moving'");
  }

  sq_pushstring(v, "stop_moving", -1);
  sq_newclosure(v, &WillOWisp_stop_moving_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|t");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'stop_moving'");
  }

  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register class 'WillOWisp'");
  }

  // Register class Wind
  sq_pushstring(v, "Wind", -1);
  if(sq_newclass(v, SQFalse) < 0) {
    std::ostringstream msg;
    msg << "Couldn't create new class 'Wind'";
    throw SquirrelError(v, msg.str());
  }
  sq_pushstring(v, "start", -1);
  sq_newclosure(v, &Wind_start_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|t");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'start'");
  }

  sq_pushstring(v, "stop", -1);
  sq_newclosure(v, &Wind_stop_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, "x|t");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'stop'");
  }

  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register class 'Wind'");
  }

}

} // namespace scripting

/* EOF */
